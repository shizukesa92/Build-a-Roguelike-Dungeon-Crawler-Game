// Function that generates a random map with a pre-defined minimum and maximum number of rooms with pre-defined maximum and minimum sizes in a grid with a pre-defined width and height
createMap = (rooms = 20) => {

	// Generates empty map with walls using a multidimensional array
	const width = 100,
		height = 100;
	let map = Array(width).fill(0);
	const y = Array(height).fill(0);
	map = map.map(() => y);

	// Fills map with a square grid room from defined x1,y1 to x2,y2
	room = (map, start, end) => {
		for (let i = start.x; i < start.x + end.x; i++) {
			map[i].fill(1, start.y, end.y + start.y);
		}
		return map;
	}

	// First map seeded
	room(map, {
		x: 45,
		y: 45
	}, {
		x: 10,
		y: 10
	}, 1);

	// Finds a wall tile with an adjacent room, returning the direction of the wall tile
	isWall = (map, coords) => {
		// return false if tile isn't wall
		if (map[coords.x][coords.y] !== 0) {
			return false;
		}
		if (typeof map[coords.x - 1] !== "undefined" && map[coords.x - 1][coords.y] == 1) {
			return "left";
		}
		if (typeof map[coords.x + 1] !== "undefined" && map[coords.x + 1][coords.y] == 1) {
			return "right";
		}
		if (map[coords.x][coords.y - 1] == 1) {
			return "top";
		}
		if (map[coords.x][coords.y + 1] == 1) {
			return "bottom";
		}
		return false;
	}

	findWall = (map) => {
		const coords = {
			x: 0,
			y: 0
		};
		let wall = false;
		while (!wall) {
			coords.x = Math.floor(Math.random() * map.length);
			coords.y = Math.floor(Math.random() * map[0].length);
			wall = isWall(map, coords);
		}
		return {
			coords: coords,
			direction: wall
		};
	}

	// Places a room in a random location that is separated by a single wall block and validates location
	placeRoom = (map) => {

		while (true) {
			numClear = 0;
			const wall = findWall(map),
				coords = wall.coords;

			const size = 15,
				rwidth = Math.floor(Math.random() * size),
				rheight = Math.floor(Math.random() * size);

			// Creates a starting X,Y coordinate for the new room on the OPPOSITE side of the open tile
			let startX, startY;
			switch (wall.direction) {
				case "right":
					startX = coords.x - rwidth;
					// Randomizes y location. From door location (coords.x,coords.y), moves it the room down/left by a little over its length then moves it back up/right but not more than a random fraction of its length
					startY = coords.y - (rheight + 1) + Math.random() * rheight;
					break;
				case "left":
					startX = coords.x + 1;
					startY = coords.y - (rheight + 1) + Math.random() * rheight;
					break;
				case "top":
					startX = coords.x - (rwidth + 1) + Math.random() * rwidth;
					startY = coords.y + 1;
					break;
				case "bottom":
					startX = coords.y - (rheight + 1) + Math.random() * rheight;
					startY = coords.y - height;
					break;
				default:
					break;
			}

			// Restarts room from while loop if room extends outside map
			if (startX < 0 || startY < 0 || startX + width >= map.length || startY + height >= map[0].length) {
				continue;
			}

			// Fills room if all spaces are clear
			let clear;
			for (let i = startX; i < startX + width; i++) {
				if (map[i].slice(startY, startY + rheight).every(tile => tile === 0)) {
					clear++;
				}
			}

			if (clear == rwidth) {
				room(map, {
					x: startX,
					y: startY
				}, {
					x: rwidth,
					y: rheight
				}, 1);

				// Creates door
				map[coords.x][coords.y] = 1;
				return map;
			}
		}


	}


	// create rooms
	for (let x = 0; x < rooms; x++) {
		placeRoom(map);
	}

	return map;
}
