const generate = () => {
	// Generates a random array of length equals to grid height  
	const height = 100,
		width = 100;
	let map = [];

	for (let x = 0; x < height; x++) {
		grid.push([]);
		for (let y = 0; y < width; y++) {
			map[x].push({
				type: 0,
			});
		}
	}

	// Generates seed of a random height between min and max room heights, and of a starting x,y that does not exceed max height and width (with an offset to prevent room from hitting wall

	const seed = {
		xcoords: 1 + Math.floor(Math.random() * 100 - 20 - 15),
		ycoords: 1 + Math.floor(Math.random() * 100 - 20 - 15),
		rheight: 10 + Math.floor(Math.random() * 10),
		rwidth: 10 + Math.floor(Math.random() * 10)
	};

	// Places seed in map
	const placeCells = (map, {
		xcoords,
		ycoords,
		rwidth = 1,
		rheight = 1,
		id
	}, type = 1) => {
		for (let i = ycoords; i < ycoords + rheight; i++) {
			for (let j = xcoords; j < x + rwidth; j++) {
				map[i][j] = {
					type,
					id
				};
			}
		}
		return grid;
	};
	map = placeCells(map, seed);
	// HELPER FUNCTIONS FOR CREATING THE MAP
	const isValidRoomPlacement = (grid, {
		x,
		y,
		width = 1,
		height = 1
	}) => {
		// check if on the edge of or outside of the grid
		if (y < 1 || y + height > grid.length - 1) {
			return false;
		}
		if (x < 1 || x + width > grid[0].length - 1) {
			return false;
		}

		// check if on or adjacent to existing room
		for (let i = y - 1; i < y + height + 1; i++) {
			for (let j = x - 1; j < x + width + 1; j++) {
				if (grid[i][j].type === 'floor') {
					return false;
				}
			}
		}
		// all grid cells are clear
		return true;
	};


	const createRoomsFromSeed = (grid, {
		x,
		y,
		width,
		height
	}, range = c.ROOM_SIZE_RANGE) => {
		// range for generating the random room heights and widths
		const [min, max] = range;

		// generate room values for each edge of the seed room
		const roomValues = [];

		const north = {
			height: _.random(min, max),
			width: _.random(min, max)
		};
		north.x = _.random(x, x + width - 1);
		north.y = y - north.height - 1;
		north.doorx = _.random(north.x, (Math.min(north.x + north.width, x + width)) - 1);
		north.doory = y - 1;
		roomValues.push(north);

		const east = {
			height: _.random(min, max),
			width: _.random(min, max)
		};
		east.x = x + width + 1;
		east.y = _.random(y, height + y - 1);
		east.doorx = east.x - 1;
		east.doory = _.random(east.y, (Math.min(east.y + east.height, y + height)) - 1);
		roomValues.push(east);

		const south = {
			height: _.random(min, max),
			width: _.random(min, max)
		};
		south.x = _.random(x, width + x - 1);
		south.y = y + height + 1;
		south.doorx = _.random(south.x, (Math.min(south.x + south.width, x + width)) - 1);
		south.doory = y + height;
		roomValues.push(south);

		const west = {
			height: _.random(min, max),
			width: _.random(min, max)
		};
		west.x = x - west.width - 1;
		west.y = _.random(y, height + y - 1);
		west.doorx = x - 1;
		west.doory = _.random(west.y, (Math.min(west.y + west.height, y + height)) - 1);
		roomValues.push(west);

		const placedRooms = [];
		roomValues.forEach(room => {
			if (isValidRoomPlacement(grid, room)) {
				// place room
				grid = placeCells(grid, room);
				// place door
				grid = placeCells(grid, {
					x: room.doorx,
					y: room.doory
				}, 'door');
				// need placed room values for the next seeds
				placedRooms.push(room);
			}
		});
		return {
			grid,
			placedRooms
		};
	};

	// BUILD OUT THE MAP





	// 4. using the first room as a seed, recursivley add rooms to the grid
	const growMap = (grid, seedRooms, counter = 1, maxRooms = c.MAX_ROOMS) => {
		if (counter + seedRooms.length > maxRooms || !seedRooms.length) {
			return grid;
		}

		grid = createRoomsFromSeed(grid, seedRooms.pop());
		seedRooms.push(...grid.placedRooms);
		counter += grid.placedRooms.length;
		return growMap(grid.grid, seedRooms, counter);
	};
	return growMap(grid, [firstRoom]);
};
